generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  passwordHash  String
  firstName     String
  lastName      String
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  cryptos       Crypto[]
  stocks        Stock[]
  transactions  Transaction[]
  portfolioSettings PortfolioSettings[]
  tbszAccounts  TbszAccount[]
  portfolios    Portfolio[]

  @@map("users")
}

model Crypto {
  id            String   @id @default(uuid())
  name          String
  symbol        String
  amount        Decimal  @db.Decimal(10, 8)
  priceAtPurchase Decimal @db.Decimal(10, 2)
  dateAcquired  DateTime
  type          String   @default("crypto")
  currentPrice  Decimal? @db.Decimal(10, 2)
  currentValue  Decimal? @db.Decimal(10, 2)
  totalChange   Decimal? @db.Decimal(10, 2)
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("cryptos")
}

model Stock {
  id              String   @id @default(uuid())
  stockName       String
  symbol          String
  shares          Decimal  @db.Decimal(10, 2)
  dateAcquired    DateTime
  priceAtPurchase Decimal  @db.Decimal(10, 2)
  currentPrice    Decimal? @db.Decimal(10, 2)
  previousDayPrice Decimal? @db.Decimal(10, 2)
  yearStartPrice  Decimal? @db.Decimal(10, 2)
  lastPriceUpdate DateTime?
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("stocks")
}

model Transaction {
  id              String   @id @default(uuid())
  assetType       String   // 'STOCK' or 'CRYPTO'
  transactionType String   // 'BUY' or 'SELL'
  name            String
  symbol          String
  amount          Decimal  @db.Decimal(10, 8)
  pricePerUnit    Decimal  @db.Decimal(10, 2)
  totalValue      Decimal  @db.Decimal(10, 2)
  transactionDate DateTime
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("transactions")
}

model PortfolioSettings {
  id                   String              @id @default(uuid())
  defaultCurrency      Currency            @default(USD)
  emailNotifications   Boolean             @default(false)
  pushNotifications    Boolean             @default(false)
  notificationFrequency NotificationFrequency @default(DAILY)
  userId               String
  user                 User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  priceAlerts          PriceAlert[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt

  @@map("portfolio_settings")
}

model PriceAlert {
  id          String   @id @default(uuid())
  symbol      String
  targetPrice Decimal  @db.Decimal(10, 2)
  condition   String   @db.VarChar(5)
  isActive    Boolean  @default(true)
  settingsId  String
  settings    PortfolioSettings @relation(fields: [settingsId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("price_alerts")
}

model TbszAccount {
  id                  String    @id @default(uuid())
  name                String
  openingDate         DateTime
  maturityDate        DateTime
  status              String    @default("ACTIVE") // ACTIVE, MATURED, CLOSED, WITHDRAWN
  initialDepositAmount Decimal   @db.Decimal(10, 2)
  userId              String
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets              Asset[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@map("tbsz_accounts")
}

model Asset {
  id            String      @id @default(uuid())
  symbol        String
  name          String
  type          AssetType
  purchaseDate  DateTime
  purchasePrice Decimal     @db.Decimal(10, 2)
  quantity      Decimal     @db.Decimal(10, 4)
  currentValue  Decimal     @db.Decimal(10, 2)
  tbszAccountId String?
  tbszAccount   TbszAccount? @relation(fields: [tbszAccountId], references: [id], onDelete: SetNull)
  portfolioId   String?
  portfolio     Portfolio?   @relation(fields: [portfolioId], references: [id], onDelete: SetNull)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("assets")
}

model Portfolio {
  id          String    @id @default(uuid())
  name        String
  description String?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets      Asset[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("portfolios")
}

enum AssetType {
  STOCK
  BOND
  ETF
  CRYPTO
  CASH
  MUTUAL_FUND
  REAL_ESTATE
  OTHER
}

enum Currency {
  USD
  EUR
  HUF
  GBP
  JPY
}

enum NotificationFrequency {
  DAILY
  WEEKLY
  MONTHLY
  NEVER
} 